name: Release Football Social

on:
  push:
    branches:
      - main
env:
  PNPM_CACHE_PATH: ~/.pnpm-store
  PNPM_CACHE_NAME: pnpm-store-cache
  VITE_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  VITE_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
  REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
  REDIS_ENDPOINT_URI: ${{ secrets.REDIS_ENDPOINT_URI }}
  FOOTBALL_DATA_API_KEY: ${{ secrets.FOOTBALL_DATA_API_KEY }}

jobs:
  release:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@master
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Get branch name
        id: branch
        run: |
          echo "branch_name=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Get node version
        id: nvmrc
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Create release pull request
        id: changesets
        uses: changesets/action@v1.4.1
        with:
          title: Release

      - name: Publish Release
        if: steps.changesets.outputs.hasChangesets == 'false'
        run: bash build/publish.sh
        shell: bash

      # - uses: pnpm/action-setup@v2
      #   with:
      #     version: 8

      # - name: Use Node.js ${{ matrix.node-version }}
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: ${{ steps.nvmrc.outputs.NODE_VERSION }}
      #     cache: "pnpm"

      # - name: Cache pnpm modules
      #   uses: actions/cache@v2
      #   with:
      #     path: ${{ env.PNPM_CACHE_PATH }}
      #     key: ${{ runner.os }}-${{ env.PNPM_CACHE_NAME }}-${{ steps.nvmrc.outputs.NODE_VERSION }}-${{ hashFiles('**/pnpm-lock.yaml') }}
      #     restore-keys: |
      #       ${{ runner.os }}-${{ env.PNPM_CACHE_NAME }}-${{ steps.nvmrc.outputs.NODE_VERSION }}-
      # - name: Set npm token
      #   run: npm config set '//registry.npmjs.org/:_authToken' "${NPM_TOKEN}"

      # - name: Install pnpm
      #   run: npm install -g pnpm

      # - name: Set pnpm config
      #   run: pnpm config set store-dir $PNPM_CACHE_PATH

      # - name: Install dependencies
      #   run: pnpm install

      # - name: Build libs
      #   run: pnpm --filter @concords/utils --filter @concords/identity --filter @concords/encrypt --filter @concords/proof-of-work --filter @concords/ledger build

      # - name: Configure SSH
      #   run: |
      #     mkdir -p ~/.ssh
      #     echo "$SSH_KEY" > ~/.ssh/id_rsa
      #     chmod 700 ~/.ssh/id_rsa
      #     cat >>~/.ssh/config <<END
      #     Host staging
      #       HostName $SSH_HOST
      #       User $SSH_USER
      #       IdentityFile ~/.ssh/id_rsa
      #       StrictHostKeyChecking no
      #     END
      #     ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
      #   env:
      #     SSH_KEY: ${{ secrets.DEPLOYMENT_KEY }}
      #     SSH_USER: ${{ secrets.DEPLOYMENT_USER }}
      #     SSH_HOST: ${{ secrets.DEPLOYMENT_HOST }}

      # - name: Deploy app servers
      #   run: cat deploy.sh | ssh staging -tt
