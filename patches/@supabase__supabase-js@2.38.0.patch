diff --git a/dist/module/SupabaseClient.js b/dist/module/SupabaseClient.js
index 52cc9c2ff5efcd2eb2217780e913215ab156e0a1..1ceb8fb5a540d5f47c8c8a40243c05e3bd586ba5 100644
--- a/dist/module/SupabaseClient.js
+++ b/dist/module/SupabaseClient.js
@@ -24,6 +24,7 @@ const DEFAULT_DB_OPTIONS = {
 const DEFAULT_AUTH_OPTIONS = {
     autoRefreshToken: true,
     persistSession: true,
+    broadcast: true,
     detectSessionInUrl: true,
     flowType: 'implicit',
 };
@@ -41,6 +42,7 @@ export default class SupabaseClient {
      * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.
      * @param options.auth.autoRefreshToken Set to "true" if you want to automatically refresh the token before expiring.
      * @param options.auth.persistSession Set to "true" if you want to automatically save the user session into local storage.
+     * @param options.auth.broadcast Set to "true" if you want to automatically save the user session into local storage.
      * @param options.auth.detectSessionInUrl Set to "true" if you want to automatically detects OAuth grants in the URL and signs in the user.
      * @param options.realtime Options passed along to realtime-js constructor.
      * @param options.global.fetch A custom fetch implementation.
@@ -176,7 +178,7 @@ export default class SupabaseClient {
             return (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : null;
         });
     }
-    _initSupabaseAuthClient({ autoRefreshToken, persistSession, detectSessionInUrl, storage, storageKey, flowType, debug, }, headers, fetch) {
+    _initSupabaseAuthClient({ autoRefreshToken, persistSession, broadcast, detectSessionInUrl, storage, storageKey, flowType, debug, }, headers, fetch) {
         const authHeaders = {
             Authorization: `Bearer ${this.supabaseKey}`,
             apikey: `${this.supabaseKey}`,
@@ -187,6 +189,7 @@ export default class SupabaseClient {
             storageKey: storageKey,
             autoRefreshToken,
             persistSession,
+            broadcast,
             detectSessionInUrl,
             storage,
             flowType,
diff --git a/src/SupabaseClient.ts b/src/SupabaseClient.ts
index 071c7f9fd2caed68e9641a6f798cea58c2c6c263..2e883f92442157d277b1ee623cd4e8a6ca07fcc0 100644
--- a/src/SupabaseClient.ts
+++ b/src/SupabaseClient.ts
@@ -75,6 +75,7 @@ export default class SupabaseClient<
    * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.
    * @param options.auth.autoRefreshToken Set to "true" if you want to automatically refresh the token before expiring.
    * @param options.auth.persistSession Set to "true" if you want to automatically save the user session into local storage.
+   * @param options.auth.broacast Set to "true" if you want to broadcast auth events between tabs.
    * @param options.auth.detectSessionInUrl Set to "true" if you want to automatically detects OAuth grants in the URL and signs in the user.
    * @param options.realtime Options passed along to realtime-js constructor.
    * @param options.global.fetch A custom fetch implementation.
@@ -266,6 +267,7 @@ export default class SupabaseClient<
     {
       autoRefreshToken,
       persistSession,
+      broadcast,
       detectSessionInUrl,
       storage,
       storageKey,
@@ -285,6 +287,7 @@ export default class SupabaseClient<
       storageKey: storageKey,
       autoRefreshToken,
       persistSession,
+      broadcast,
       detectSessionInUrl,
       storage,
       flowType,
